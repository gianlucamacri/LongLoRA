  0%|                                                                                                                                                               | 0/270 [00:00<?, ?it/s]/home/gmacri/miniconda3/lib/python3.11/site-packages/torch/utils/checkpoint.py:429: UserWarning: torch.utils.checkpoint: please pass in use_reentrant=True or use_reentrant=False explicitly. The default value of use_reentrant will be updated to be False in the future. To maintain current behavior, pass use_reentrant=True. It is recommended that you use use_reentrant=False. Refer to docs for more details on the differences between the two variants.
  warnings.warn(
/home/gmacri/miniconda3/lib/python3.11/site-packages/deepspeed/runtime/zero/stage_1_and_2.py:1586: UserWarning: The torch.cuda.*DtypeTensor constructors are no longer recommended. It's best to use methods such as torch.tensor(data, dtype=*, device='cuda') to create tensors. (Triggered internally at /opt/conda/conda-bld/pytorch_1695392026823/work/torch/csrc/tensor/python_tensor.cpp:83.)
  total_norm_cuda = get_accelerator().FloatTensor([float(total_norm)])
  0%|▌                                                                                                                                                    | 1/270 [00:30<2:14:53, 30.09s/it]

  1%|█                                                                                                                                                    | 2/270 [01:01<2:18:01, 30.90s/it]

  1%|█▋                                                                                                                                                   | 3/270 [01:33<2:19:35, 31.37s/it]

  1%|██▏                                                                                                                                                  | 4/270 [02:07<2:23:45, 32.43s/it]
{'loss': 4.4515, 'learning_rate': 2e-05, 'epoch': 0.42}


  2%|███▎                                                                                                                                                 | 6/270 [03:09<2:18:39, 31.51s/it]

  3%|███▊                                                                                                                                                 | 7/270 [03:40<2:17:41, 31.41s/it]

  3%|████▍                                                                                                                                                | 8/270 [04:13<2:20:06, 32.08s/it]

  3%|████▉                                                                                                                                                | 9/270 [04:44<2:18:13, 31.77s/it]
  3%|████▉                                                                                                                                                | 9/270 [04:44<2:18:13, 31.77s/it]Traceback (most recent call last):
  File "/home/gmacri/tirocinioCameraSummarization/LongLora_fork/LongLoRA/supervised-fine-tune-qlora.py", line 507, in <module>
    train()
  File "/home/gmacri/tirocinioCameraSummarization/LongLora_fork/LongLoRA/supervised-fine-tune-qlora.py", line 493, in train
    trainer.train()
  File "/home/gmacri/miniconda3/lib/python3.11/site-packages/transformers/trainer.py", line 1591, in train
    return inner_training_loop(
           ^^^^^^^^^^^^^^^^^^^^
  File "/home/gmacri/miniconda3/lib/python3.11/site-packages/transformers/trainer.py", line 1892, in _inner_training_loop
    tr_loss_step = self.training_step(model, inputs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/gmacri/miniconda3/lib/python3.11/site-packages/transformers/trainer.py", line 2787, in training_step
    self.accelerator.backward(loss)
  File "/home/gmacri/miniconda3/lib/python3.11/site-packages/accelerate/accelerator.py", line 1983, in backward
    self.deepspeed_engine_wrapped.backward(loss, **kwargs)
  File "/home/gmacri/miniconda3/lib/python3.11/site-packages/accelerate/utils/deepspeed.py", line 167, in backward
    self.engine.backward(loss, **kwargs)
  File "/home/gmacri/miniconda3/lib/python3.11/site-packages/deepspeed/utils/nvtx.py", line 15, in wrapped_fn
    ret_val = func(*args, **kwargs)
              ^^^^^^^^^^^^^^^^^^^^^
  File "/home/gmacri/miniconda3/lib/python3.11/site-packages/deepspeed/runtime/engine.py", line 1936, in backward
    self.optimizer.backward(loss, retain_graph=retain_graph)
  File "/home/gmacri/miniconda3/lib/python3.11/site-packages/deepspeed/runtime/zero/stage_1_and_2.py", line 1953, in backward
    self.loss_scaler.backward(loss.float(), retain_graph=retain_graph)
  File "/home/gmacri/miniconda3/lib/python3.11/site-packages/deepspeed/runtime/fp16/loss_scaler.py", line 63, in backward
    scaled_loss.backward(retain_graph=retain_graph)
  File "/home/gmacri/miniconda3/lib/python3.11/site-packages/torch/_tensor.py", line 492, in backward
    torch.autograd.backward(
  File "/home/gmacri/miniconda3/lib/python3.11/site-packages/torch/autograd/__init__.py", line 251, in backward
    Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
KeyboardInterrupt